#TIme dependent example of the presentation
"""Backend supported: tensorflow.compat.v1, tensorflow, pytorch, jax, paddle"""
import os
os.environ['DDE_BACKEND'] = 'pytorch'
import torch

# Check if CUDA (GPU) is available and set default tensor type to cuda, but I haven't installed cuda yet
if torch.cuda.is_available():
    torch.set_default_tensor_type('torch.cuda.FloatTensor')
    print("/////////////////\n Tensors type on GPU \n///////////////")

    
import deepxde as dde
import matplotlib.pyplot as plt
import numpy as np

#Geometry
geom = dde.geometry.Interval(-1, 1)
timedomain = dde.geometry.TimeDomain(0, 1)
geomtime = dde.geometry.GeometryXTime(geom, timedomain)



def pde(x, y):
    # Most backends
    dy_t = dde.grad.jacobian(y, x, j=1)
    dy_xx = dde.grad.hessian(y, x, j=0)

    # Backend pytorch
    return (
        dy_t
        - dy_xx
        + torch.exp(-x[:, 1:])
        * (torch.sin(np.pi * x[:, 0:1]) - np.pi ** 2 * torch.sin(np.pi * x[:, 0:1]))
        )



#Conditions (Boudary & Initial)
def IC_func(x):
    return np.sin(np.pi * x[:, 0:1])

def BC_func(x):
    return 0


ic = dde.icbc.IC(geomtime, IC_func, lambda _, on_initial: on_initial)
bc = dde.icbc.DirichletBC(geomtime, BC_func, lambda _, on_boundary: on_boundary)


#Data and model
data = dde.data.TimePDE(
    geomtime,
    pde,
    [bc,ic],
    num_domain=40,
    num_boundary=20,
    num_initial=10,
    num_test=10000,
)


layer_size = [2] + [32] * 3 + [1]
activation = "tanh"
initializer = "Glorot uniform"
net = dde.nn.FNN(layer_size, activation, initializer)

model = dde.Model(data, net)


#Computations and graph
model.compile("adam", lr=0.001)
losshistory, train_state = model.train(iterations=10000)

dde.saveplot(losshistory, train_state, issave=True, isplot=True)

x = geom.uniform_points(1000, True)
y = model.predict(x, operator=pde)
plt.figure()
plt.plot(x, y)
plt.xlabel("x")
plt.ylabel("PDE residue")
plt.show()

##Chat

# x = geom.uniform_points(1000, True)
# t = np.array([1])
# x_t = np.column_stack((x, np.ones_like(x)*t))
# u_xt = model.predict(x_t)

# plt.figure()
# plt.plot(x, u_xt)
# plt.xlabel("x")
# plt.ylabel("u(x, t=1)")
# plt.show()